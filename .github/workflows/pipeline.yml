name: Java CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  ECR_REGISTRY: 369528189607.dkr.ecr.eu-west-1.amazonaws.com
  ECR_REPOSITORY: devsecops/java-app
  EKS_CLUSTER_NAME: eks-devsecops-cluster
  AWS_REGION: eu-west-1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Run tests
      run: mvn test

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.build.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push Docker image
      id: build
      run: |
        SHORT_SHA=$(git rev-parse --short HEAD)
        IMAGE_TAG="${SHORT_SHA}"
        IMAGE_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"
        
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        
        echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "✅ Built and pushed: $IMAGE_URI"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        
        helm upgrade --install java-app ./helm \
          --namespace default \
          --set image.tag=${{ needs.build-and-push.outputs.image-tag }} \
          --wait --timeout=5m
          
        echo "✅ Deployed to EKS"
        
