name: Java CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Set shared environment variables
env:
  ECR_REGISTRY: 369528189607.dkr.ecr.eu-west-1.amazonaws.com
  ECR_REPOSITORY: devsecops/java-app
  EKS_CLUSTER_NAME: eks-devsecops-cluster
  AWS_REGION: eu-west-1


jobs:


  # ------------------ Test Stage ------------------
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17 and cache Maven dependencies
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run unit tests
        run: mvn test

  # ------------------ Mutation Testing with PIT ------------------
  mutation-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17 and cache Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run PIT mutation testing
        run: mvn clean test org.pitest:pitest-maven:mutationCoverage

  # ------------------ OWASP Dependency-Check (SCA) ------------------

  depchecktest:
    runs-on: ubuntu-latest
    name: depcheck_test
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Dependency-Check Data
        uses: actions/cache@v3
        with:
          path: ~/.dependency-check
          key: dependency-check-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            dependency-check-${{ runner.os }}-

      - name: Build project with Maven
        run: mvn clean install

      - name: Run OWASP Dependency-Check (HTML + SARIF)
        uses: dependency-check/Dependency-Check_Action@main
        id: depcheck
        with:
          project: 'test'
          path: '.'
          format: 'HTML,SARIF'
          out: 'reports'
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: Upload HTML Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Depcheck HTML Report
          path: reports/dependency-check-report.html

      - name: Upload SARIF to GitHub Security Dashboard
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/dependency-check-report.sarif






  # ------------------ Docker Build & Push to ECR ------------------
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, mutation-test]
    if: github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.build.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        id: build
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          IMAGE_TAG="${SHORT_SHA}"
          IMAGE_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"

          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "✅ Built and pushed: $IMAGE_URI"

  # ------------------ Helm Deployment to EKS ------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Deploy application to Amazon EKS using Helm
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

          helm upgrade --install java-app ./helm \
            --namespace default \
            --set image.tag=${{ needs.build-and-push.outputs.image-tag }}

          echo "✅ Deployed to EKS"
